// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Data.Models;

public partial class IMDBContext : DbContext
{
    public IMDBContext(DbContextOptions<IMDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ActorsWithMovieInfo> ActorsWithMovieInfos { get; set; }

    public virtual DbSet<ActorsWithMovieInfoDistinct> ActorsWithMovieInfoDistincts { get; set; }

    public virtual DbSet<MoviesWithActor> MoviesWithActors { get; set; }

    public virtual DbSet<MoviesWithActorsDistinct> MoviesWithActorsDistincts { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ActorsWithMovieInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ActorsWithMovieInfo");

            entity.Property(e => e.ActorName)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.BirthYear).HasColumnName("birthYear");
            entity.Property(e => e.Country)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DeathYear).HasColumnName("deathYear");
            entity.Property(e => e.Nconst)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("nconst");
            entity.Property(e => e.PrimaryProfession)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("primaryProfession");
            entity.Property(e => e.Tconst)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tconst");
        });

        modelBuilder.Entity<ActorsWithMovieInfoDistinct>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ActorsWithMovieInfoDistinct");

            entity.Property(e => e.ActorName)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.BirthYear).HasColumnName("birthYear");
            entity.Property(e => e.Country)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DeathYear).HasColumnName("deathYear");
            entity.Property(e => e.Nconst)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("nconst");
            entity.Property(e => e.PrimaryProfession)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("primaryProfession");
            entity.Property(e => e.Tconst).HasColumnName("tconst");
        });

        modelBuilder.Entity<MoviesWithActor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("MoviesWithActors");

            entity.Property(e => e.AverageRating).HasColumnType("decimal(3, 1)");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Genres)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("genres");
            entity.Property(e => e.MovieTitle).HasMaxLength(3000);
            entity.Property(e => e.Nconst)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("nconst");
            entity.Property(e => e.RuntimeMinutes).HasColumnName("runtimeMinutes");
            entity.Property(e => e.Tconst)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tconst");
            entity.Property(e => e.TitleType)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("titleType");
        });

        modelBuilder.Entity<MoviesWithActorsDistinct>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("MoviesWithActorsDistinct");

            entity.Property(e => e.AverageRating).HasColumnType("decimal(3, 1)");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Genres)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("genres");
            entity.Property(e => e.MovieTitle).HasMaxLength(3000);
            entity.Property(e => e.Nconst).HasColumnName("nconst");
            entity.Property(e => e.RuntimeMinutes).HasColumnName("runtimeMinutes");
            entity.Property(e => e.Tconst)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tconst");
            entity.Property(e => e.TitleType)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("titleType");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}